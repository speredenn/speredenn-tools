#!/bin/bash

function prune() {
    
    local time_spec="30 days ago"
    
    if ! which git &>/dev/null; then
        echo "Please install a recent version of Git" >&2
        echo "See http://git.or.cz for more information about Git" >&2
        exit 1
    fi
    
    if test $(git rev-parse "HEAD@{$time_spec}") = "$(git rev-parse HEAD)"; then
        local TMOUT=20
        echo "You are about to remove *all* commits made before the very last one you made"
        read
    fi

    
    # Something like that
    git filter-branch --parent-filter \
        'test $(git rev-parse "HEAD@{$time_spec}") = "$GIT_COMMIT" || cat ' \
        HEAD
    if test "$?" != "0"; then
        die "Please make sure you did '$SCRIPT_NAME commit' before removing old files."
    fi
    
    # See git mailing list
    # "Trying to use git filter-branch to compress history by removing
    # large, obsolete binary files"
    
    git reset --soft # was '--hard' on the post...
    rm -rf .git/refs/original/
    #vi .git/packed-refs # Use vi to remove the line referring to
    # refs/original...  No need since we have linear, no tags, nothing
    # special
    git reflog expire --all --expire=now --expire-unreachable=0
    
    echo "Committing the removal action"
    
    # Make sure we are able to tell in a commit that on this
    # date, a cleanup was made
    local removal_date=$( date +"%a, %d %b %Y %H:%M:%S %z" )
    local witness_file=.git-home-history-last-removal
    local msg="Removed older than '$time_spec' on $removal_date"
    echo "$msg" > ${witness_file}
    git add $witness_file
    git commit -m"$msg" $witness_file
    
    # Finally make sure everything is ok, and remove old stuff
    git gc --prune=$timespec
}

prune
exit 0
