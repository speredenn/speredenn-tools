#!/bin/bash

# Publish a whole folder of svg files in exported pdf files
# git sha references OK
# version: git-sha-tag

# path where we are when the script is called
orgpath=`pwd`

# initialize options
recursivemode=
commitmode=

# read options
while getopts rc: name; do
    case $name in
        r) recursivemode=1;;
        c) commitmode=1
            commit="$OPTARG";;
        ?) printf "Usage: %s: [-r] [-c commit-hash] file(s)-or-folder-path\n" $0
            exit 2;;
    esac
done

# if the commit-mode is on, revert to the specified commit for export
if [ ! -z "$commitmode" ]; then
    printf 'Option -c "%s" specified\n' "$commit"
else # else take the last file version or commit
    printf "Option -c not specified\n"
fi

# what remains after those arguments should the one or more files
# or folder paths.
shift $(($OPTIND - 1))
paths=$*

# if no path is given, path is the current path
if [ -z "$paths" ]; then
    paths="$orgpath"
fi

# for every given path, export the files
for path in $paths; do
    # test if the given path is a folder path or a file path
    # and affect the folderpath variable
    if [ -d $path ]; then
        # we're in folder mode
        mode="folder"
    else
        # we're in file mode
        mode="file"
    fi
    
    if [ $mode == "folder" ]; then
        # if the recursive-mode is on, find all the SVG files recursively
        cd $path
        if [ ! -z "$recursivemode" ]; then
            filepaths=`find -L -iname "*.svg" -print`
        else # else, find then only in the current folder
            filepaths=`find -L -maxdepth 1 -iname "*.svg" -print`
        fi
        cd $orgpath
    else # file mode
        filepaths=$path
    fi

    for filepath in $filepaths; do
        if [ $mode == "folder" ]; then
            folderpath=$path # not working in every case :-(
        else
            folderpath=`dirname "$filepath"`
        fi
        filename="${filepath##*/}"
        cd $folderpath
        gitdate=`git log -1 --format=format:'%ci' --abbrev-commit "$filename"`
        gitsha=`git log -1 --format=format:'%h' --abbrev-commit "$filename"`
        gitstatus=`git status | grep "$filename" | wc -l`
        lastmod=`stat -c --format=%y "$filename"`

        if [ -z $commitmode]; then
        git show $commit:"$filegitpath" > "/tmp/$file-tmp"
        
        # Test if the file as been modified since the last commit
        if [ $gitstatus -eq 0 ]; then
            # If no, and if the output file does not exist, create the file
            newfilename="${filename%.*}-$gitsha".pdf
            if [ ! -f $newfilename ]; then
                echo "$filename > $newfilename"
                sed "s/git-sha/$gitsha ($gitdate)/g" "$filename" > "/tmp/$filename"
                inkscape -D -A "$newfilename" -f "/tmp/$filename"
            else
                # Else, skip the process
                echo "$newfilename exists: skipping..."
            fi
        else
            # If the file has been modified since the last commit, create the
            # file every time the script is run, but append "dirty"
            newfilename="${filename%.*}-$gitsha-dirty".pdf
            echo "$filename > $newfilename"
            sed "s/git-sha/$gitsha-dirty ($lastmod)/g" "$filename" > "/tmp/$filename"
            inkscape -D -A "$newfilename" -f "/tmp/$filename"
        fi
        rm -f /tmp/$filename
        cd $orgpath
    done
done
cd $orgpath
exit





else # if mode is file
    folderpath=`dirname $path`
    cd $folderpath
    file=$1
    commit=$2
    curlocation=`pwd`
    # Find the root of the current git repository
    while [ ! -d .git ] && [ ! `pwd` = "/" ]; do cd ..; done
    gitrepolocation=`pwd`
    cd $curlocation
    filegitpath=${curlocation#"$gitrepolocation/"}/$file
    git show $commit:"$filegitpath" > "/tmp/$file-tmp"
    gitdate=`git log -1 --format=format:'%ci' --abbrev-commit $commit`
    gitsha=`git log -1 --format=format:'%h' --abbrev-commit $commit`
    filename="${file%.*}-$gitsha".pdf
    echo "$file > $filename"
    sed "s/git-sha/$gitsha ($gitdate)/g" "/tmp/$file-tmp" > "/tmp/$file"
    inkscape -D -A "${file%.*}-$gitsha".pdf -f "/tmp/$file"
    rm -f "/tmp/$file" "/tmp/$file-tmp"
    cd $curpath
fi

# TODO: add help, add arguments parser, add get last version from master.
