#!/bin/bash

# Publish a whole folder of svg files in exported pdf files
# git sha references OK
# version: git-sha-tools


curpath=`pwd`

recursivemode=
commitmode=

while getopts rc: name; do
    case $name in
        r) recursivemode=1;;
        c) commitmode=1
            commit="$OPTARG";;
        ?) printf "Usage: %s: [-r] [-c commit-hash] file(s)-or-folder-path\n" $0
            exit 2;;
    esac
done

# if the commit-mode is on, revert to the specified commit for export
if [ ! -z "$commitmode" ]; then
    printf 'Option -c "%s" specified\n' "$commit"
else # else take the last file version or commit
    printf "Option -c not specified\n"
fi

# what remains after those arguments should the one or more files
# or folder paths.
shift $(($OPTIND - 1))
paths=$*

# for every given path, export the files
for path in $paths; do
    # test if the given path is a folder path or a file path
    if [ -d $path ]; then
        # we're in folder mode
        folderpath=$path
        echo $folderpath
    else
        # we're in file mode
        folderpath=`dirname "$path"`
        echo $folderpath
    fi
done

exit





# test if path is a file path or a directory path
# as there might be many paths given, we test the first one
if [ -d ${path[0]} ]
    printf "The given path is a directory.\n"
else
    printf "We're in file mode\n"

# if no path is given, take current folder
if [ $path == "" ]; then
    path=$curpath
fi
cd $path

if [ -d $path ]; then # if the given path is a directory path
    # if the recursive-mode is on, find all the SVG files recursively
    if [ ! -z "$recursivemode" ]; then
        printf "Option -r specified\n"
        files=`find -L -iname *.svg -print0`
    else # else, find then only in the current folder
        printf "Option -r not specified\n"
        files=`find -L -maxdepth 1 -iname *.svg -print0`
    fi
else # else, if that must be one or more files
    files=$path
fi















# if there is no argument: then, we are in folder-mode
# else, we test if the input is a folder of a file
if [ $# -eq 0 ]; then
    mode="folder"
    path="./"
else
    if [ -d "$1" ]; then
        mode="folder"
    else
        mode="file"
    fi
    path="$1"
fi

if [ $mode == "folder" ]; then
    cd $path
    for file in `ls *.svg`; do
        gitdate=`git log -1 --format=format:'%ci' --abbrev-commit $file`
        gitsha=`git log -1 --format=format:'%h' --abbrev-commit $file`
        gitstatus=`git status | grep "$file" | wc -l`
        lastmod=`stat -c --format=%y $file`
        # Test if the file as been modified since the last commit
        if [ $gitstatus -eq 0 ]; then
            # If no, and if the output file does not exist, create the file
            filename="${file%.*}-$gitsha".pdf
            if [ ! -f $filename ]; then
                echo "$file > $filename"
                sed "s/git-sha/$gitsha ($gitdate)/g" "$file" > "/tmp/$file"
                inkscape -D -A "${file%.*}-$gitsha".pdf -f "/tmp/$file"
            else
                # Else, skip the process
                echo "${file%.*}-$gitsha.pdf exists: skipping..."
            fi
        else
            # If the file has been modified since the last commit, create the
            # file every time the script is run, but append "dirty"
            filename="${file%.*}-$gitsha-dirty".pdf
            echo "$file > $filename"
            sed "s/git-sha/$gitsha-dirty ($lastmod)/g" "$file" > "/tmp/$file"
            inkscape -D -A "$filename" -f "/tmp/$file"
        fi
        rm -f /tmp/$file
    done
    cd $curpath
else # if mode is file
    folderpath=`dirname $path`
    cd $folderpath
    file=$1
    commit=$2
    curlocation=`pwd`
    # Find the root of the current git repository
    while [ ! -d .git ] && [ ! `pwd` = "/" ]; do cd ..; done
    gitrepolocation=`pwd`
    cd $curlocation
    filegitpath=${curlocation#"$gitrepolocation/"}/$file
    git show $commit:"$filegitpath" > "/tmp/$file-tmp"
    gitdate=`git log -1 --format=format:'%ci' --abbrev-commit $commit`
    gitsha=`git log -1 --format=format:'%h' --abbrev-commit $commit`
    filename="${file%.*}-$gitsha".pdf
    echo "$file > $filename"
    sed "s/git-sha/$gitsha ($gitdate)/g" "/tmp/$file-tmp" > "/tmp/$file"
    inkscape -D -A "${file%.*}-$gitsha".pdf -f "/tmp/$file"
    rm -f "/tmp/$file" "/tmp/$file-tmp"
    cd $curpath
fi

# TODO: add help, add arguments parser, add get last version from master.
